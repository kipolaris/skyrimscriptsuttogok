@startuml building_change

title Szobamanipuláció

Participant "g : GameEngine" as g
Participant "b: Building AI" as ai
Participant "roomToChangeDoors : Room" as sz

participant "r1 : Room" as sz1
Participant "r2 : Room" as sz2
participant "splittable : Room" as split
Participant "mergedRoom : Room" as sz3

g->ai ++: initiateChange()
opt ajtó manipuláció [GameEngine.Rooms.size()>=1]
    ai->sz ++: requestDoorinfo()
    note right: Szükséges, hogy tudjuk, milyen állapotból indulunk.
    return doors : ArrayList<Door>

    ai->>ai : randomizeFinalState()
    note right: random meghatározza, hogy a megadott ajtók \n végül milyenek legyenek (pl. egyirányúak, tűnjenek el, stb.)

    ai->sz ++: setDoors(doors : ArrayList<Door>)
    return

opt szoba osztódás [GameEngine.Rooms.size()>=1]

    ai->ai ++: splitRoom(splittable)
    ai->>"aftersplit1 : Room" **: create
    ai->g ++: addRoom(aftersplit1)
    return
    ai->>"aftersplit2 : Room" **: create
    ai->g ++: addRoom(aftersplit2)
    return

    ai->g ++: removeRoom(splittable)
    return

    ai->>split !!: delete
    return

end

opt szoba egyesítés [GameEngine.rooms.size()>=2]

    ai->g ++: getRooms()
    return rooms : ArrayList<Room>

    ai->ai ++: chooseTwoRooms()
    return twoRooms : ArrayList<Room>

    ai->ai ++: mergeRooms(r1, r2)
    ai->>sz3 **: create
    ai-->ai --:

    ai->g ++: addRoom(mergedRoom)
    g-->ai --:

    ai->g ++: removeRoom(r1)
    g->>sz1 !!: delete
    g-->ai --:

    ai->g ++: removeRoom(r2)
    g->>sz2 !!: delete
    g-->ai --:

end
ai-->g --:

@enduml