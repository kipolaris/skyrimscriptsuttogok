@startuml building_change

title Szobamanipuláció

Participant GameEngine as g
Participant "Building AI" as ai
Participant RoomToChangeDoors as sz

participant Room1 as sz1
Participant Room2 as sz2
Participant MergedRoom as sz3

g->ai : initiateChange()
opt ajtó manipuláció [GameEngine.Rooms.size()>=1]
    ai->sz ++: requestDoorinfo
    note right: Szükséges, hogy tudjuk, milyen állapotból indulunk.
    return ArrayList<Door>

    ai->>ai : randomizeFinalState
    note right: random meghatározza, hogy a megadott ajtók \n végül milyenek legyenek (pl. egyirányúak, tűnjenek el, stb.)

    ai->sz ++: setDoors(ArrayList<Door>)
    return

    note right : Egy ajtó két szobához is tartozhat,\n tehát ezzel a szomszédok is frissülnek.

end

opt szoba osztódás [GameEngine.Rooms.size()>=1]

    ai->sz : splitRoom()
    return

end

opt szoba egyesítés [GameEngine.Rooms.size()>=2]

    ai->g ++: getRooms()
    return ArrayList<Room>

    ai->>ai : chooseTwoRooms()
    ai->>ai ++: mergeRooms(Room, Room)
    'Ezt itt a building AI törölje, vagy inkább a GameEngine?'
    ai->>g ++: delete(Room)
    g->>sz1 !!: delete
    g-->ai
    deactivate g
    ai->>g ++: deleteRoom(Room)
    g->>sz2 !!: delete
    g-->ai
    deactivate g
    ai->>g ++: addRoom(Room)
    g->>sz3 **: create
    g-->ai
    deactivate g
    deactivate ai

end
ai-->g

@enduml